paste(my_char, collapse=" ")
my_name <- c(my_char, "Lizzie")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X", "Y", "Z"). sep="")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x<- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
,y_data
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <-x[!is.na(x)]
y
y[y>0]
x[x.0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo =11, bar = 2, norf = NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
install.packages("RMySQL")
data<-url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode =readlines(data)
htmlCode =readLines(data)
clode(data)
close(data)
htmlCode
nchar(10)
nchar(data)
nchar(htmlCode)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("63b0227524902d476107", "62c498c51c1b700cfdd95de481b5b22e4331078e")
myapp <- oauth_app("63b0227524902d476107", "62c498c51c1b700cfdd95de481b5b22e4331078e")
x <- read.fwf(file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
x <- read.fwf(file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"), widths=c(9, 4,4, 4,4, 4,4, 4,4))
x
head(x)
x <- read.fwf(file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"), skip=5, widths=c(9, 4,4, 4,4, 4,4, 4,4))
head(x)
x <- read.fwf(file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"), skip=4, widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(x)
sum(x[,6])
head(x,[,6])
head(x[,6])
sum(x[,4])
sum(x[,3])
nchar(htmlCode)
setwd("~/Desktop/20141020_DREAM_analysis/Network 2")
data<-read.csv("Network2_expression_data.csv")
cov<-cov(data)
wrtie.csv(cov, "Network_2_covariance.csv")
write.csv(cov, "Network_2_covariance.csv")
cors<-cor(data, method="spearman")
write.csv(cors, "Network_2_Spearman_correlation.csv")
corp<-cor(data, method="pearson")
write.csv(corp, "Network_2_Pearson_correlation.csv")
setwd("~/Desktop/20141020_DREAM_analysis/Network 3")
data<-read.csv("Network3_expression_data.csv")
cov<-cov(data)
write.csv(cov, "Network_3_covariance.csv")
corp<-cor(data, method="pearson")
write.csv(corp, "Network_3_Pearson_correlation.csv")
cors<-cor(data, method="spearman")
write.csv(cors, "Network_3_Spearman_correlation.csv")
setwd("~/Desktop/20141020_DREAM_analysis/Network 4")
data<-read.csv("Network4_expression_data.csv")
cors<-cor(data, method="spearman")
write.csv(cors, "Network_4_Spearman_correlation.csv")
corp<-cor(data, method="pearson")
write.csv(corp, "Network_4_Pearson_correlation.csv")
install.packages("~/Downloads/LaplacesDemon_14.06.23.tar", repos = NULL)
install.packages(pkgs="/Users/ecoker/Desktop/LaplacesDemon_14.06.23.tar.gz", repos=NULL, type="source")
library("LaplacesDemon", lib.loc="~/Library/R/3.0/library")
vignette("BayesianInference")
vignette("LaplacesDemonTutorial")
vignette("Examples")
vignette("LaplacesDemonTutorial")
vignette("BayesianInference")
pnorm(70, mean = 80, sd = 10, lower.tail = FALSE)
qnorm(0.95, mean = 1100, sd = 75)
pbinom(1, size = 5, prob = 0.5)
pbinom(4, size = 5, prob = 0.5)
pbinom(5, size = 5, prob = 0.5)
ppois(2, lambda = 5 * 0.5)
ppois(4, lambda = 5 * 0.5)
ppois(5, lambda = 5 * 0.5)
pbinom(4, size = 5, prob = 0.5, lower.tail = FALSE)
pbinom(5, size = 5, prob = 0.5, lower.tail = FALSE)
pbinom(0, size = 5, prob = 0.5, lower.tail = FALSE)
pbinom(1, size = 5, prob = 0.5, lower.tail = FALSE)
ppois(10, lambda = 5 * 3)
library("LaplacesDemon", lib.loc="~/Library/R/3.0/library")
data(demonsnacks)
View(demonsnacks)
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
install.packages("dplyr")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
cran<- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package =="swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500 & r_os == "linux-gnu")
info()
filter(cran, size>100500 && r_os == "linux-gnu")
filter(cran, size>100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3, 5, NA,
| 10))
!is.na(c(3, 5, NA,10))
filter(cran, r_version !is.na())
filter(cran, r_version==!is.na())
filter(cran, r_version=!is.na())
filter(cran, r_version!=is.na())
filter(cran, r_version!=NA)
filter(cran, r_version!="NA")
filter(cran, !is.na(r_version))
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb=size_mb/2^10)
cran3
mutate(cran3, correct_size = size + 1000)
summarize(cran,avg_bytes = mean(size))
install.packages("UsingR")
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
model = lm(x ~ y)
model
data(mtcars)
model = lm(weight ~ mpg)
names(data)
data<-mtcars
data
model = lm(wt ~ mpg)
model = lm(data$wt ~ data$mpg)
model
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
fit
1.5*0.4
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit<-lm(y ~ x)
fit
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child~parent, galton)
plot(jitter(child,4)~parent, galton)
regrline<-lm(child~parent, galton)
abline(regrline, lwd=3, col=red)
abline(regrline, lwd=3, col='red')
summary(regrline)
lm(child~parent, galton)
fit<-lm(child~parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
fit$coef[1]
ols.ic<-fit$coef[1]
ols.slope<-fit$coef[2]
lhs-rhs
all.equal(lhs, rhs)
varChild<-var()
varChild<-var(galton)
varChild<-var(galton$child)
varRes<-var(fit$residuals)
varEst<-var()
varEst<-var(ols\)
varEst<-var(est)
varEst<-var(est(ols.slope))
varEst<-var(est(ols.slope)+intercept)
varEst<-var(fit$residuals)
varEst<-var(est(ols.slope, ols.ic))
all.equal(varChild, varRes+varst)
all.equal(varChild, varRes+varEst)
efit<-lm(accel~mag+dist, attenu)
mean(residuals)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
library(swirl)
siwlr()
swirl()
cor(gpa_nor, gch_nor)
l_nor<-lm(gch_nor, gpa_nor)
l_nor<-lm(gch_nor~gpa_nor)
simbias
x1c<-simbias()
apply(x1c, 1, mean)
fit1<-lm(Agriculture~Fertility)
fit1<-lm(swiss$Agriculture~swiss$Fertility)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture, Examination, Education, swiss)
fit3 <- lm(Fertility ~ Agriculture, Examination, Education, swiss)
fit3 <- lm(Fertility ~ Agriculture, )
fit3 <- lm(Fertility ~ Agriculture, Fertility~Examination, Fertility~Education, swiss)
inf()
info()
skip()
anova(fit1, fit3)
deviance(fit3)
d<-deviance(fit3)/43
n<-(deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
mdl<-glm(ravenWinNum ~ ravenScore, family, ravenData)
mdl<-glm(ravenWinNum ~ ravenScore+family, ravenData)
skip()
lodds<-predict(mdl, data.frame(ravenScore=c(0, 3, 6))
)
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
x <- c(1:100)
y <- 1 / (1 + exp(-x))
plot(x,y)
x2<-x+50
y2 <- 1 / (1 + exp(-x2))
plot(x2,y2)
x2<-x+5
plot(x2,y2)
x2<-x-5
plot(x2,y2)
x3<-x-5
x3
plot(x3,y2)
y3 <- 1 / (1 + exp(-x3))
plot(x3,y3)
x <- c(1:100)
y <- 1 / (1 + exp(-x))
plot(x,y)
y <- 100*(1 / (1 + exp(-x)))
plot(x,y)
x2<-x-20
plot(x2,y)
x <- c(-10:10)
y <- 1 / (1 + exp(-x))
plot(x,y)
y <- 100*(1 / (1 + exp(-x)))
plot(x,y)
y <- (100*(1 / (1 + exp(-x))))-50
plot(x,y)
y <- 100*(1 / (1 + exp(-x)))
plot(x,y)
x2<-x+10
plot(x2,y)
x3<-x+50
plot(x3,y)
x <- c(40:60)
y <- 100*(1 / (1 + exp(-x)))
plot(x,y)
x <- c(-10:10)
y <- 100*(1 / (1 + exp(-x)))
x2<-x+50
plot(x2,y)
x2 <- c(-10:10)
y <- 100*(1 / (1 + exp(-x)))
x<-x2+50
plot(x,y)
x2 <- c(-10:10)
y <- 100*(1 / (1 + exp(-x)))
x<-x2+50
plot(x,y, xlim=c(0,100))
x2 <- c(-10:10)
y <- 100*(1 / (1 + exp(-x)))
x<-x2+50
plot(x,y, xlim=c(0,100), ylim=c(0,100))
x2 <- c(0:100)
y <- 100*(1 / (1 + exp(-x)))
x<-x2+50
plot(x,y)
x2 <- c(0:100)
y <- 100*(1 / (1 + exp(-x2)))
x<-x2+50
plot(x,y)
plot(x,y, xlim=c(0,100), ylim=c(0,100))
x2 <- c(-100:100)
y <- 100*(1 / (1 + exp(-x2)))
x<-x2+50
plot(x,y)
x2 <- c(-50:50)
y <- 100*(1 / (1 + exp(-x2)))
x<-x2+50
plot(x,y)
x2 <- c(-50000:50000)/100
y <- 100*(1 / (1 + exp(-x2)))
x<-x2+50
plot(x,y)
plot(x,y, xlim=c(0,100), ylim=c(0,100))
plot(x,y, xlim=c(0,100), ylim=c(0,100), type="l", col="blue")
plot(x,y, xlim=c(0,100), ylim=c(0,100), type="l", col="blue", xlab="Percentage activity stimulus", ylab="Percentage response")
x2 <- c(-50000:50000)/100
y <- 100*(1 / (1 + exp(-x2)))
x<-x2+50
plot(x,y, xlim=c(0,100), ylim=c(0,100), type="l", col="blue", xlab="Percentage activity stimulus", ylab="Percentage response", main="Stimulus-response curve")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit<-lm(y~x)
coef(fit)
est<-predict(fit,data.frame(x))
plot(x,y)
abline(fit,col="red")
summary(fit)
data<-mtcars
fit<-lm(data$)
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
coef(fit)
predict(fit,data.frame(x=mean(x)), interval="confidence")
?mtcars
predict(fit,data.frame(x=3), interval="prediction")
data<-mtcars
data
summary(data)
auto<-data(where am=0)
auto<-data(am=0)
auto<-data(am==0)
auto<-data(am==1)
sep<-split(data, data$am)
sep
auto<-data(data$am==0)
auto<-data(data$am="0")
auto<-data(data$am=="0")
auto<-subset(data, data$am==0)
auto
manual<-subset(data, data$am==1)
manual
summary(manual)
mean(manual$mpg)
mean(auto$mpg)
init_model <- lm(mpg ~ ., data = mtcars)
best_model <- step(init_model, direction = "both")
summary(best_model)
base_model <- lm(mpg ~ am, data = mtcars)
anova(base_model, best_model)
mean(auto$mpg)
median(autp$mpg)
mean(auto$mpg)
median(auto$mpg)
mean(manual$mpg)
mediam(auto$mpg)
mean(manual$mpg)
median(auto$mpg)
mean(manual$mpg)
median(manual$mpg)
t.test(mpg ~ am, data = mtcars)
mtcars
auto<-subset(mtcars, mtcars$am==0)
mean(auto$mpg)
manual<-subset(mtcars, mtcars$am==1)
mean(manual$mpg)
shiny
install.packages("shiny")
?nottem
head(nottem)
nottem
setwd("~/")
runExample("my_app")
library(shiny)
runExample("my_app")
setwd("~/my_app")
runExample("my_app")
runApp("my_app")
setwd("~/")
runApp("my_app")
library(shiny)
setwd("~/")
runApp("my_app")
runApp("my_app")
runApp("my_app")
head(WorldPhones)
runApp("my_app")
runApp("my_app")
?datasets
datasets
library(help = "datasets")
head(AirPassengers)
head(BJsales)
head(EuStockMarkets)
EuStockMarkets
?EuStockMarkets
head(EuStockMarkets)
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
names(EuStockMarkets)
head(EuStockMarkets)
?EuStockMarkets
head(EuStockMarkets)
EuStockMarkets
runApp("my_app")
?EuStockMarket
?EuStockMarkets
?EuStockMarkets
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
runApp("my_app")
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='rosemarylion', token='67190B2889BD58EEE5260B24AA8A6017', secret='AR29K0dN9/CEKPpZEBIY4j/n8teOWIppzw12NG4X')
library(shinyapps)
shinyapps::deployApp('~')
shinyapps::deployApp('~/my_app')
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
setwd("~/my_app")
author("slides")
library(devtools)
library('slidify')
author("slides")
slidify("index.Rmd")
head(EuStockMarkets)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
head(EuStockMarkets)
plot.ts(EuStockMarkets$FTSE,ylab="Daily closing price",xlab="Date")
input="FTSE"
dataset <- EuStockMarkets[,input$index]
summary(dataset)
index="FTSE"
dataset <- EuStockMarkets[,input$index]
summary(dataset)
dataset <- EuStockMarkets[,index]
summary(dataset)
plot.ts(EuStockMarkets$index,ylab="Daily closing price",xlab="Date")
plot.ts(EuStockMarkets[,index],ylab="Daily closing price",xlab="Date")
?EuStockMarkets
